name: python-deployment

run-name: ${{ github.actor }} - ${{ github.ref_name}} -${{ github.sha }}

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  PythonVersion: 3.8
  DockerImageName: todoapp

jobs:
  python-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PythonVersion }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PythonVersion }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage flake8
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python manage.py test

      - name: Generate Report
        run: |
          coverage run --source='.' manage.py test
          coverage report

      - name: Linting
        run: |
          flake8 . --show-source --statistics --exit-zero

      - name: Check Complexity
        run: |
          flake8 . --exit-zero --max-complexity=6

      - name: Upload python App files
        uses: actions/upload-artifact@v4
        with:
          name: python-app-files
          path: ./src                 # uploading files from "src" directory

      - name: Upload helm charts
        if: github.ref_name == 'main'
        uses: actions/upload-artifact@v4
        with:
          name: helm-charts
          path: ./helm-charts         # uploading "todoapp/" directory

      - name: Upload cluster configs
        uses: actions/upload-artifact@v4
        with:
          name: cluster-artifact
          path: ./cluster.yml         # uploading "cluster.yml" file

  docker-ci:
    name: Build and Push Image
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' }}
    needs: python-ci
    steps:

    - name: Download App files
      uses: actions/download-artifact@v4
      with:
        name: python-app-files
        path: ./src                   # downloading files from "src" directory

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        push: true
        context: ./src
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DockerImageName }}:${{ github.sha }}

  helm-ci:
    runs-on: ubuntu-latest
    needs: python-ci
    if: github.ref_name == 'main'
    name: Helm CI
    steps:
    - name: download helm charts
      uses: actions/download-artifact@v4
      with:
        name: helm-charts
        path: .                     # downloading "todoapp/" directory in root

    - name: Set Up Helm
      uses: azure/setup-helm@v4.2.0

    - name: Lint helm
      run: helm lint ./todoapp

    - name: Template Helm
      run: helm template todoapp ./todoapp/ -f ./todoapp/values.yaml

    - name: Package Helm
      run: helm package ./todoapp   # packing files from "todoapp" directory in archive "*ChartName-*version.tgz"

    - name: Upload Helm Package
      uses: actions/upload-artifact@v4
      with:
        name: helm-package
        path: ./*.tgz               # uploading "*ChartName-*version.tgz"

  helm-cd:
    needs: [ docker-ci, helm-ci ]
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    name: deploy todoapp to kind cluster via Helm
    steps:
    - name: download cluster config
      uses: actions/download-artifact@v4
      with:
        name: cluster-artifact      # downloading "cluster.yml" file in root

    - name: Create k8s Kind Cluster
      uses: helm/kind-action@v1
      with:
        config: ./cluster.yml

    - name: download helm charts
      uses: actions/download-artifact@v4
      with:
        name: helm-charts
        path: .                     # downloading "todoapp/" directory in root

    - name: download helm package
      uses: actions/download-artifact@v4
      with:
        name: helm-package
        path: .                     # downloading "*ChartName-*version.tgz" in root

    - name: Set Up Helm
      uses: azure/setup-helm@v4.2.0

    - name: Set Up kubectl
      uses: azure/setup-kubectl@v4
      id: install

    - name: Helm dry-run
      run: |
        helm install --dry-run todoapp ./todoapp-*.tgz \
        -f ./todoapp/values.yaml \
        --set mysql.secrets.MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
        --set mysql.secrets.MYSQL_USER=${{ secrets.MYSQL_USER }} \
        --set mysql.secrets.MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
        --set todoapp.secrets.SECRET_KEY=${{ secrets.SECRET_KEY }} \
        --set todoapp.secrets.DB_NAME=${{ secrets.DB_NAME }} \
        --set todoapp.secrets.DB_USER=${{ secrets.DB_USER }} \
        --set todoapp.secrets.DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
        --set todoapp.secrets.DB_HOST=${{ secrets.DB_HOST }} \
        --set todoapp.image.repository=${{ secrets.DOCKERHUB_USERNAME }}/todoapp \
        --set todoapp.image.tag="${{ github.sha }}"

    - name: helm chart deploying
      run: |
        helm upgrade --install --atomic --debug --wait --timeout 3m0s \
        todoapp ./todoapp-*.tgz \
        -f ./todoapp/values.yaml \
        --set mysql.secrets.MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
        --set mysql.secrets.MYSQL_USER=${{ secrets.MYSQL_USER }} \
        --set mysql.secrets.MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
        --set todoapp.secrets.SECRET_KEY=${{ secrets.SECRET_KEY }} \
        --set todoapp.secrets.DB_NAME=${{ secrets.DB_NAME }} \
        --set todoapp.secrets.DB_USER=${{ secrets.DB_USER }} \
        --set todoapp.secrets.DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
        --set todoapp.secrets.DB_HOST=${{ secrets.DB_HOST }} \
        --set todoapp.image.repository=${{ secrets.DOCKERHUB_USERNAME }}/todoapp \
        --set todoapp.image.tag="${{ github.sha }}"
